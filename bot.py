import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token from environment variable
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/level - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞\n"
        "/schedule - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫\n"
        "/exercise - –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n"
        "/homework - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def level_assessment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the language level assessment process."""
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞—á–∏–Ω–∞—é—â–∏–π (A1)", callback_data='level_A1'),
            InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π (A2)", callback_data='level_A2'),
        ],
        [
            InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π (B1)", callback_data='level_B1'),
            InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (B2)", callback_data='level_B2'),
        ],
        [
            InlineKeyboardButton("–°–≤–æ–±–æ–¥–Ω—ã–π (C1)", callback_data='level_C1'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('level_'):
        level = query.data.split('_')[1]
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å {level}. "
            "–ù–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è."
        )

async def schedule_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle lesson scheduling."""
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data='day_1'),
            InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data='day_2'),
        ],
        [
            InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data='day_3'),
            InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data='day_4'),
        ],
        [
            InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data='day_5'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É—Ä–æ–∫–∞:",
        reply_markup=reply_markup
    )

def main():
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("level", level_assessment))
    application.add_handler(CommandHandler("schedule", schedule_lesson))
    application.add_handler(CallbackQueryHandler(button_callback))

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 